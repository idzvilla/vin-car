#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –±–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

import asyncio
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from src.settings import settings
from src.validators import VINValidator

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=settings.bot_token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –†–æ—É—Ç–µ—Ä—ã
user_router = Router()
callback_router = Router()

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from src.db import init_db, get_db_session
from src.models import Ticket
from sqlalchemy import select

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –≤ –ø–∞–º—è—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ)
tickets = {}
ticket_counter = 1

@user_router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = (
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIN Report Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ VIN –Ω–æ–º–µ—Ä (17 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
        "3. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º PDF –æ—Ç—á–µ—Ç\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä VIN:</b> 1HGBH41JXMN109186\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!"
    )
    
    await message.answer(welcome_text)

@user_router.message(F.text)
async def handle_vin_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å VIN –Ω–æ–º–µ—Ä–∞–º–∏."""
    global ticket_counter
    
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è VIN
    is_valid, error_message = VINValidator.validate(text)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VIN</b>\n\n{error_message}\n\n"
            "üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b> 17 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ I, O, Q\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> 1HGBH41JXMN109186",
            parse_mode="HTML"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è VIN
    normalized_vin = VINValidator.normalize(text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    for ticket in tickets.values():
        if ticket["vin"] == normalized_vin and ticket["user_id"] == user_id and ticket["status"] in ["NEW", "TAKEN"]:
            await message.answer(
                f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket['id']} —Å VIN <code>{normalized_vin}</code> "
                f"—É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {_get_status_text(ticket['status'])}",
                parse_mode="HTML"
            )
            return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with get_db_session() as session:
            ticket = Ticket(
                user_id=user_id,
                username=username,
                vin=normalized_vin,
                status="NEW",
                created_at=datetime.now()
            )
            session.add(ticket)
            await session.commit()
            await session.refresh(ticket)
            ticket_id = ticket.id
            
            logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î: {ticket_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        ticket_id = ticket_counter
        ticket_counter += 1
        
        tickets[ticket_id] = {
            "id": ticket_id,
            "vin": normalized_vin,
            "user_id": user_id,
            "status": "NEW",
            "assignee_id": None,
            "created_at": datetime.now().strftime('%d.%m.%Y %H:%M')
        }
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket_id}\n"
        f"üöó <b>VIN:</b> <code>{normalized_vin}</code>\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –≤ —Ä–∞–±–æ—Ç–µ\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> 5-30 –º–∏–Ω—É—Ç\n"
        f"üìÑ <b>–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    await send_ticket_to_managers(ticket_id, username)

async def send_ticket_to_managers(ticket_id: int, username: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    ticket = tickets[ticket_id]
    
    ticket_text = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{ticket['id']}</b>\n\n"
        f"üë§ <b>–û—Ç:</b> @{username} (ID: {ticket['user_id']})\n"
        f"üöó <b>VIN:</b> <code>{ticket['vin']}</code>\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {ticket['created_at']}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –Ω–æ–≤–∞—è"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìã –í–∑—è—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"take_ticket:{ticket_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                    callback_data=f"done_hint:{ticket_id}"
                )
            ]
        ]
    )
    
    await bot.send_message(
        chat_id=settings.manager_chat_id,
        text=ticket_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@callback_router.callback_query(lambda c: c.data.startswith("take_ticket:"))
async def handle_take_ticket(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏
    ticket_id_match = re.search(r"take_ticket:(\d+)", callback.data)
    if not ticket_id_match:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return
    
    if ticket_id not in tickets:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    ticket = tickets[ticket_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    if ticket["status"] != "NEW":
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    ticket["status"] = "TAKEN"
    ticket["assignee_id"] = callback.from_user.id
    
    manager_username = callback.from_user.username or f"manager_{callback.from_user.id}"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message:
        updated_text = (
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{ticket['id']}</b>\n\n"
            f"üë§ <b>–û—Ç:</b> @{manager_username} (ID: {ticket['user_id']})\n"
            f"üöó <b>VIN:</b> <code>{ticket['vin']}</code>\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {ticket['created_at']}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –Ω–∞–∑–Ω–∞—á–µ–Ω–∞\n"
            f"üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> @{manager_username}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        updated_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                        callback_data=f"done_hint:{ticket_id}"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            text=updated_text,
            reply_markup=updated_keyboard,
            parse_mode="HTML"
        )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!")

@callback_router.callback_query(lambda c: c.data.startswith("done_hint:"))
async def handle_done_hint(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏
    ticket_id_match = re.search(r"done_hint:(\d+)", callback.data)
    if not ticket_id_match:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return
    
    hint_text = (
        "üìã <b>–ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É:</b>\n\n"
        "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –≤ –æ—Ç–≤–µ—Ç</b> –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏\n"
        "2Ô∏è‚É£ <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> /done {ticket_id} + PDF\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
        "‚Ä¢ –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    ).format(ticket_id=ticket_id)
    
    await callback.message.answer(
        hint_text,
        parse_mode="HTML"
    )
    
    await callback.answer("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

@user_router.message(F.document)
async def handle_document_reply(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if message.chat.id != settings.manager_chat_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF <b>–≤ –æ—Ç–≤–µ—Ç</b> –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML"
        )
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
    replied_text = message.reply_to_message.text or ""
    ticket_id_match = re.search(r"–∑–∞—è–≤–∫–∞ ‚Ññ(\d+)", replied_text, re.IGNORECASE)
    
    if not ticket_id_match:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not message.document.file_name or not message.document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (50 –ú–ë)
    if message.document.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë",
            parse_mode="HTML"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    await process_ticket_completion(message, ticket_id)

async def process_ticket_completion(message: Message, ticket_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    manager_id = message.from_user.id
    manager_username = message.from_user.username or f"manager_{manager_id}"
    
    try:
        # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with get_db_session() as session:
            result = await session.execute(
                select(Ticket).where(Ticket.id == ticket_id)
            )
            ticket = result.scalar_one_or_none()
            
            if not ticket:
                await message.answer(
                    f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            if ticket.status == "DONE":
                await message.answer(
                    f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            ticket.status = "DONE"
            ticket.assignee_id = manager_id
            await session.commit()
    
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_report_to_user(ticket, message.document)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await message.answer(
                f"‚úÖ <b>–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"üë§ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫)
            if message.reply_to_message:
                try:
                    await message.reply_to_message.edit_reply_markup(reply_markup=None)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

async def send_report_to_user(ticket, document) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        await bot.send_message(
            chat_id=ticket.user_id,
            text=f"‚úÖ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.id}: –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                 f"üöó <b>VIN:</b> <code>{ticket.vin}</code>\n"
                 f"üìÑ <b>–í–∞—à –æ—Ç—á–µ—Ç (PDF)</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏–∂–µ.",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            chat_id=ticket.user_id,
            document=document.file_id,
            caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É",
            parse_mode="HTML"
        )
        
        logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.user_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {ticket.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

def _get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
    status_map = {
        "NEW": "–Ω–æ–≤–∞—è",
        "TAKEN": "–≤ —Ä–∞–±–æ—Ç–µ",
        "DONE": "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }
    return status_map.get(status, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(user_router)
dp.include_router(callback_router)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ VIN Report Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        print("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
    
    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
