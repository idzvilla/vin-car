#!/usr/bin/env python3
"""–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã."""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.payment_service import PaymentService
from loguru import logger


async def test_payment_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã."""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from src.db_adapter import db_adapter
    await db_adapter.initialize()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from src.db import init_db
    init_db()
    logger.info("–°–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 123456789
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await PaymentService.get_user_subscription(test_user_id)
        logger.info(f"1. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {subscription}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
        can_generate = await PaymentService.can_user_generate_report(test_user_id)
        logger.info(f"2. –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: {can_generate}")
        
        # 3. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ 1 –æ—Ç—á–µ—Ç
        payment = await PaymentService.create_payment(test_user_id, "single")
        logger.info(f"3. –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {payment}")
        
        # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success = await PaymentService.complete_payment(payment.id)
        logger.info(f"4. –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω: {success}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        subscription = await PaymentService.get_user_subscription(test_user_id)
        logger.info(f"5. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {subscription}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
        can_generate = await PaymentService.can_user_generate_report(test_user_id)
        logger.info(f"6. –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: {can_generate}")
        
        # 7. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç
        report_used = await PaymentService.use_user_report(test_user_id)
        logger.info(f"7. –û—Ç—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {report_used}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        subscription = await PaymentService.get_user_subscription(test_user_id)
        logger.info(f"8. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {subscription}")
        
        # 9. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ 100 –æ—Ç—á–µ—Ç–æ–≤
        bulk_payment = await PaymentService.create_payment(test_user_id, "bulk")
        logger.info(f"9. –°–æ–∑–¥–∞–Ω –æ–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {bulk_payment}")
        
        # 10. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        bulk_success = await PaymentService.complete_payment(bulk_payment.id)
        logger.info(f"10. –û–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω: {bulk_success}")
        
        # 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        final_subscription = await PaymentService.get_user_subscription(test_user_id)
        logger.info(f"11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {final_subscription}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await test_payment_system()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
