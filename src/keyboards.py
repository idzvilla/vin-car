from __future__ import annotations

from typing import Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger


class TicketKeyboards:
    @staticmethod
    def get_take_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –í–∑—è—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data=f"take_ticket:{ticket_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                        callback_data=f"done_hint:{ticket_id}"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", ticket_id=ticket_id)
        return keyboard
    
    @staticmethod
    def get_taken_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                        callback_data=f"done_hint:{ticket_id}"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", ticket_id=ticket_id)
        return keyboard
    
    @staticmethod
    def get_done_hint_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        callback_data=f"send_pdf_hint:{ticket_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /done",
                        callback_data=f"command_hint:{ticket_id}"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π", ticket_id=ticket_id)
        return keyboard
    
    @staticmethod
    def get_empty_keyboard() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[])


class MainKeyboards:
    @staticmethod
    def get_start_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç?",
                        callback_data="help_info"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        callback_data="support_info"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
        return keyboard
    
    @staticmethod
    def get_help_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="back_to_start"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏")
        return keyboard


class ManagerKeyboards:
    @staticmethod
    def get_manager_actions_keyboard() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        callback_data="manager_stats"
                    ),
                    InlineKeyboardButton(
                        text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏",
                        callback_data="manager_tickets"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        callback_data="manager_settings"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return keyboard


class PaymentKeyboards:
    @staticmethod
    def get_payment_options_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ–ø–ª–∞—Ç—ã."""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ 1 –æ—Ç—á–µ—Ç - $2",
                        callback_data="payment:single"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üì¶ 100 –æ—Ç—á–µ—Ç–æ–≤ - $100",
                        callback_data="payment:bulk"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="payment:cancel"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞")
        return keyboard
    
    @staticmethod
    def get_payment_confirmation_keyboard(payment_type: str, payment_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                        callback_data=f"confirm_payment:{payment_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"cancel_payment:{payment_id}"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", payment_type=payment_type, payment_id=payment_id)
        return keyboard
    
    @staticmethod
    def get_payment_status_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞."""
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data="check_payment_status"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="back_to_payment"
                    )
                ]
            ]
        )
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")
        return keyboard

