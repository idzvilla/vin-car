from __future__ import annotations

import asyncio
from typing import Optional, Dict, Any
from loguru import logger
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker, Session

from .models import Base
from .settings import settings


class DatabaseAdapter:
    def __init__(self):
        self.engine = None
        self.session_factory = None
        self.use_supabase = settings.use_supabase
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ë–î
            use_supabase = str(settings.use_supabase).lower() in ('true', '1', 'yes', 'on')
            has_supabase_config = settings.supabase_url and settings.supabase_key
            
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: use_supabase={use_supabase}, has_config={has_supabase_config}")
            logger.info(f"Supabase URL: {settings.supabase_url}")
            logger.info(f"Supabase Key: {settings.supabase_key[:20] if settings.supabase_key else '–ù–ï–¢'}...")
            
            if use_supabase and has_supabase_config:
                try:
                    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase")
                    await self._init_supabase()
                    logger.info("Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ Supabase, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite: {e}")
                    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –∫–∞–∫ fallback")
                    await self._init_sqlite()
            else:
                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite")
                await self._init_sqlite()
            
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", error=str(e), exc_info=True)
            raise
    
    async def _init_sqlite(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite."""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
        self.engine = create_engine(
            settings.database_url,
            echo=False,
            pool_pre_ping=True,
            pool_recycle=3600,
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
        self.session_factory = sessionmaker(
            self.engine,
            class_=Session,
            expire_on_commit=False,
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        Base.metadata.create_all(self.engine)
        logger.info("SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_supabase(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase."""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from supabase import create_client, Client
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
            supabase: Client = create_client(settings.supabase_url, settings.supabase_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                response = supabase.table('tickets').select('*').limit(1).execute()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ tickets —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ tickets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É tickets...")
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL
                create_table_sql = """
                CREATE TABLE IF NOT EXISTS tickets (
                    id SERIAL PRIMARY KEY,
                    vin VARCHAR(17) NOT NULL,
                    user_id BIGINT NOT NULL,
                    username VARCHAR(255),
                    status VARCHAR(20) NOT NULL DEFAULT 'new',
                    assignee_id BIGINT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
                """
                supabase.rpc('exec_sql', {'sql': create_table_sql}).execute()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ tickets —Å–æ–∑–¥–∞–Ω–∞")
            
            logger.info("Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.supabase_client = supabase
            
        except ImportError:
            logger.error("Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase")
            raise
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase", error=str(e))
            raise
    
    async def create_ticket(self, vin: str, user_id: int, username: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        logger.info(f"üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: vin={vin}, user_id={user_id}, username={username}, use_supabase={self.use_supabase}")
        
        try:
            if self.use_supabase:
                logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
                result = await self._create_ticket_supabase(vin, user_id, username)
            else:
                logger.info("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
                result = await self._create_ticket_sqlite(vin, user_id, username)
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
            raise
    
    async def _create_ticket_sqlite(self, vin: str, user_id: int, username: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ SQLite."""
        session = self.session_factory()
        try:
            from .models import Ticket
            
            ticket = Ticket(
                vin=vin,
                user_id=user_id,
                status="NEW"
            )
            session.add(ticket)
            session.commit()
            session.refresh(ticket)
            
            return {
                "id": ticket.id,
                "vin": ticket.vin,
                "user_id": ticket.user_id,
                "username": username,
                "status": ticket.status,
                "created_at": ticket.created_at.isoformat()
            }
        finally:
            session.close()
    
    async def _create_ticket_supabase(self, vin: str, user_id: int, username: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Supabase."""
        from datetime import datetime
        
        ticket_data = {
            "vin": vin,
            "user_id": user_id,
            "status": "NEW",
            "created_at": datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º username —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ None
        if username:
            ticket_data["username"] = username
        
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Supabase", ticket_data=ticket_data)
        
        response = self.supabase_client.table('tickets').insert(ticket_data).execute()
        
        logger.debug("–û—Ç–≤–µ—Ç –æ—Ç Supabase", response=response.data)
        
        if response.data:
            return response.data[0]
        else:
            raise Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Supabase")
    
    async def get_ticket(self, ticket_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
        if self.use_supabase:
            return await self._get_ticket_supabase(ticket_id)
        else:
            return await self._get_ticket_sqlite(ticket_id)
    
    async def _get_ticket_sqlite(self, ticket_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ SQLite."""
        session = self.session_factory()
        try:
            from .models import Ticket
            
            ticket = session.query(Ticket).filter(Ticket.id == ticket_id).first()
            if ticket:
                return {
                    "id": ticket.id,
                    "vin": ticket.vin,
                    "user_id": ticket.user_id,
                    "status": ticket.status,
                    "assignee_id": ticket.assignee_id,
                    "created_at": ticket.created_at.isoformat()
                }
            return None
        finally:
            session.close()
    
    async def _get_ticket_supabase(self, ticket_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ Supabase."""
        response = self.supabase_client.table('tickets').select('*').eq('id', ticket_id).execute()
        
        if response.data:
            return response.data[0]
        return None
    
    async def update_ticket_status(self, ticket_id: int, status: str, assignee_id: Optional[int] = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏."""
        if self.use_supabase:
            return await self._update_ticket_supabase(ticket_id, status, assignee_id)
        else:
            return await self._update_ticket_sqlite(ticket_id, status, assignee_id)
    
    async def _update_ticket_sqlite(self, ticket_id: int, status: str, assignee_id: Optional[int] = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ SQLite."""
        session = self.session_factory()
        try:
            from .models import Ticket
            
            ticket = session.query(Ticket).filter(Ticket.id == ticket_id).first()
            if ticket:
                ticket.status = status
                if assignee_id:
                    ticket.assignee_id = assignee_id
                session.commit()
                return True
            return False
        finally:
            session.close()
    
    async def _update_ticket_supabase(self, ticket_id: int, status: str, assignee_id: Optional[int] = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Supabase."""
        try:
            update_data = {"status": status}
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º assignee_id, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            # if assignee_id:
            #     update_data["assignee_id"] = assignee_id
            
            logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Supabase", ticket_id=ticket_id, update_data=update_data)
            
            response = self.supabase_client.table('tickets').update(update_data).eq('id', ticket_id).execute()
            
            logger.debug("–û—Ç–≤–µ—Ç –æ—Ç Supabase –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", response=response.data)
            
            return len(response.data) > 0
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Supabase", ticket_id=ticket_id, error=str(e), exc_info=True)
            raise
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        if self.engine:
            self.engine.dispose()
            self.engine = None
            self.session_factory = None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
db_adapter = DatabaseAdapter()