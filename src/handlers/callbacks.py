"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤."""

from __future__ import annotations

import asyncio
import re
from typing import Optional

from aiogram import Bot, Router
from aiogram.types import CallbackQuery
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import get_db_session
from ..keyboards import PaymentKeyboards, TicketKeyboards
from ..models import Ticket
from ..settings import settings
from .user import _handle_payment_cancellation, _handle_payment_confirmation, _handle_payment_selection

# –†–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤
callback_router = Router()


@callback_router.callback_query(lambda c: c.data.startswith("take_ticket:"))
async def handle_take_ticket(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if callback.message and callback.message.chat.id != settings.manager_chat_id:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏
    ticket_id_match = re.search(r"take_ticket:(\d+)", callback.data)
    if not ticket_id_match:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return
    
    manager_id = callback.from_user.id
    manager_username = callback.from_user.username or f"manager_{manager_id}"
    
    try:
        from src.db_adapter import db_adapter
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        ticket_data = None
        for attempt in range(3):
            ticket_data = await db_adapter.get_ticket(ticket_id)
            if ticket_data:
                break
            await asyncio.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        if not ticket_data:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if ticket_data['status'] != 'NEW':
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        await db_adapter.update_ticket_status(ticket_id, "TAKEN", manager_id)
        
        logger.info(
            "–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            ticket_id=ticket_id,
            manager_id=manager_id,
            manager_username=manager_username
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message:
            from datetime import datetime
            created_at = datetime.fromisoformat(ticket_data['created_at'].replace('Z', '+00:00'))
            
            updated_text = (
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{ticket_data['id']}</b>\n\n"
                f"üë§ <b>–û—Ç:</b> @{manager_username} (ID: {ticket_data['user_id']})\n"
                f"üöó <b>VIN:</b> <code>{ticket_data['vin']}</code>\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –Ω–∞–∑–Ω–∞—á–µ–Ω–∞\n"
                f"üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> @{manager_username}"
            )
            
            await callback.message.edit_text(
                text=updated_text,
                reply_markup=TicketKeyboards.get_taken_keyboard(ticket_id),
                parse_mode="HTML"
            )
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!")
            
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
            ticket_id=ticket_id,
            manager_id=manager_id,
            error=str(e)
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")


@callback_router.callback_query(lambda c: c.data.startswith("done_hint:"))
async def handle_done_hint(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if callback.message and callback.message.chat.id != settings.manager_chat_id:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏
    ticket_id_match = re.search(r"done_hint:(\d+)", callback.data)
    if not ticket_id_match:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return
    
    hint_text = (
        "üìã <b>–ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É:</b>\n\n"
        "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –≤ –æ—Ç–≤–µ—Ç</b> –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏\n"
        "2Ô∏è‚É£ <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> /done {ticket_id} + PDF\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n"
        "‚Ä¢ –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    ).format(ticket_id=ticket_id)
    
    await callback.message.answer(
        hint_text,
        reply_markup=TicketKeyboards.get_done_hint_keyboard(ticket_id),
        parse_mode="HTML"
    )
    
    await callback.answer("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@callback_router.callback_query(lambda c: c.data.startswith("send_pdf_hint:"))
async def handle_send_pdf_hint(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ PDF.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏!")


@callback_router.callback_query(lambda c: c.data.startswith("command_hint:"))
async def handle_command_hint(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –∫–æ–º–∞–Ω–¥–µ.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏
    ticket_id_match = re.search(r"command_hint:(\d+)", callback.data)
    if not ticket_id_match:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return
    
    command_text = f"/done {ticket_id}"
    
    await callback.answer(f"üí¨ –ö–æ–º–∞–Ω–¥–∞: {command_text}")


@callback_router.callback_query(lambda c: c.data == "help_info")
async def handle_help_info(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–º–æ—â–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    help_text = (
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å VIN –æ—Ç—á–µ—Ç:</b>\n\n"
        "1Ô∏è‚É£ <b>–ù–∞–π–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä</b> –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:\n"
        "‚Ä¢ –õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ (—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É)\n"
        "‚Ä¢ –î–≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞\n"
        "‚Ä¢ –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n\n"
        "2Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –±–æ—Ç—É</b> (17 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "3Ô∏è‚É£ <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</b> (5-30 –º–∏–Ω—É—Ç)\n\n"
        "4Ô∏è‚É£ <b>–ü–æ–ª—É—á–∏—Ç–µ PDF –æ—Ç—á–µ—Ç</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä VIN:</b> 1HGBH41JXMN109186"
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=MainKeyboards.get_help_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()


@callback_router.callback_query(lambda c: c.data == "support_info")
async def handle_support_info(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    support_text = (
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b> @support_username\n"
        "üìß <b>Email:</b> support@example.com\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 9:00 - 18:00 –ú–°–ö\n\n"
        "üìã <b>–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "‚Ä¢ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    )
    
    await callback.message.edit_text(
        support_text,
        reply_markup=MainKeyboards.get_help_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()


@callback_router.callback_query(lambda c: c.data == "back_to_start")
async def handle_back_to_start(callback: CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    welcome_text = (
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIN Report Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ VIN –Ω–æ–º–µ—Ä (17 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
        "3. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º PDF –æ—Ç—á–µ—Ç\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä VIN:</b> 1HGBH41JXMN109186\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=MainKeyboards.get_start_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@callback_router.callback_query(lambda c: c.data.startswith("payment:"))
async def handle_payment_selection(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ–ø–ª–∞—Ç—ã."""
    payment_type = callback.data.split(":", 1)[1]
    await _handle_payment_selection(callback, payment_type)
    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("confirm_payment:"))
async def handle_payment_confirmation(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        payment_id = int(callback.data.split(":", 1)[1])
        await _handle_payment_confirmation(callback, payment_id)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.")
    await callback.answer()


@callback_router.callback_query(lambda c: c.data.startswith("cancel_payment:"))
async def handle_payment_cancellation(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        payment_id = int(callback.data.split(":", 1)[1])
        await _handle_payment_cancellation(callback, payment_id)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.")
    await callback.answer()


@callback_router.callback_query(lambda c: c.data == "check_payment_status")
async def handle_check_payment_status(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞."""
    user_id = callback.from_user.id
    
    from ..payment_service import PaymentService
    
    subscription = await PaymentService.get_user_subscription(user_id)
    
    if subscription:
        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"üìà <b>–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤:</b> {subscription.total_reports}\n"
            f"üìä <b>–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç—á–µ—Ç–æ–≤:</b> {subscription.reports_remaining}\n"
            f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:</b> {subscription.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å VIN –Ω–æ–º–µ—Ä–∞."
        )
    else:
        status_text = (
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=PaymentKeyboards.get_payment_status_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()


@callback_router.callback_query(lambda c: c.data == "back_to_payment")
async def handle_back_to_payment(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞."""
    payment_text = (
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "üí≥ <b>1 –æ—Ç—á–µ—Ç - $2.00</b>\n"
        "üì¶ <b>100 –æ—Ç—á–µ—Ç–æ–≤ - $100.00</b> (—ç–∫–æ–Ω–æ–º–∏—è $100!)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=PaymentKeyboards.get_payment_options_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()
