"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""

from __future__ import annotations

import re
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import Document, Message
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import get_db_session
from ..keyboards import TicketKeyboards
from ..models import Ticket
from ..settings import settings
from ..validators import MessageValidator

# –†–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
manager_router = Router()


@manager_router.message(Command("done"))
async def cmd_done(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if message.chat.id != settings.manager_chat_id:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if not message.document:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /done &lt;–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏&gt; + PDF",
            parse_mode="HTML"
        )
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_text = message.text or ""
    ticket_id_match = re.search(r"/done\s+(\d+)", command_text)
    
    if not ticket_id_match:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /done 123 + PDF",
            parse_mode="HTML"
        )
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏.\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /done 123 + PDF",
            parse_mode="HTML"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document = message.document
    is_valid_size, size_error = MessageValidator.validate_document_size(
        document.file_size,
        settings.max_file_size
    )
    
    if not is_valid_size:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</b>\n\n{size_error}", parse_mode="HTML")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not document.file_name or not document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    await _process_ticket_completion(bot, message, ticket_id, document)


@manager_router.message(F.document)
async def handle_document_reply(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if message.chat.id != settings.manager_chat_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
    replied_text = message.reply_to_message.text or ""
    ticket_id_match = re.search(r"–∑–∞—è–≤–∫–∞ ‚Ññ(\d+)", replied_text, re.IGNORECASE)
    
    if not ticket_id_match:
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ", text=replied_text)
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document = message.document
    is_valid_size, size_error = MessageValidator.validate_document_size(
        document.file_size,
        settings.max_file_size
    )
    
    if not is_valid_size:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</b>\n\n{size_error}", parse_mode="HTML")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not document.file_name or not document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    await _process_ticket_completion(bot, message, ticket_id, document)


async def _process_ticket_completion(
    bot: Bot,
    message: Message,
    ticket_id: int,
    document: Document
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        ticket_id: ID –∑–∞—è–≤–∫–∏
        document: PDF –¥–æ–∫—É–º–µ–Ω—Ç
    """
    manager_id = message.from_user.id
    manager_username = message.from_user.username or f"manager_{manager_id}"
    
    try:
        async with get_db_session() as session:
            # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏
            result = await session.execute(
                select(Ticket).where(Ticket.id == ticket_id)
            )
            ticket = result.scalar_one_or_none()
            
            if not ticket:
                await message.answer(
                    f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            if ticket.status == "DONE":
                await message.answer(
                    f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            ticket.status = "DONE"
            ticket.assignee_id = manager_id
            await session.commit()
            
            logger.info(
                "–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                ticket_id=ticket_id,
                manager_id=manager_id,
                manager_username=manager_username
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await _send_report_to_user(bot, ticket, document)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await message.answer(
                f"‚úÖ <b>–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"üë§ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫)
            if message.reply_to_message:
                try:
                    await message.reply_to_message.edit_reply_markup(
                        reply_markup=TicketKeyboards.get_empty_keyboard()
                    )
                except Exception as e:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏", error=str(e))
            
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
            ticket_id=ticket_id,
            manager_id=manager_id,
            error=str(e)
        )
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def _send_report_to_user(bot: Bot, ticket: Ticket, document: Document) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        ticket: –ó–∞—è–≤–∫–∞
        document: PDF –¥–æ–∫—É–º–µ–Ω—Ç
    """
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        await bot.send_message(
            chat_id=ticket.user_id,
            text=f"‚úÖ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{ticket.id}: –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                 f"üöó <b>VIN:</b> <code>{ticket.vin}</code>\n"
                 f"üìÑ <b>–í–∞—à –æ—Ç—á–µ—Ç (PDF)</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏–∂–µ.",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            chat_id=ticket.user_id,
            document=document.file_id,
            caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç (PDF)",
            parse_mode="HTML"
        )
        
        logger.info(
            "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            ticket_id=ticket.id,
            user_id=ticket.user_id
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            ticket_id=ticket.id,
            user_id=ticket.user_id,
            error=str(e)
        )





