"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

from __future__ import annotations

import re
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import get_db_session
from ..keyboards import MainKeyboards, TicketKeyboards
from ..models import Ticket
from ..settings import settings
from ..validators import UserInputValidator, VINValidator

# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", user_id=user_id, username=username)
    
    welcome_text = (
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIN Report Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ VIN –Ω–æ–º–µ—Ä (17 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
        "3. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º PDF –æ—Ç—á–µ—Ç\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä VIN:</b> 1HGBH41JXMN109186\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=MainKeyboards.get_start_keyboard(),
        parse_mode="HTML"
    )


@user_router.message(Command("help"))
async def cmd_help(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", user_id=user_id)
    
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîç <b>–ß—Ç–æ —Ç–∞–∫–æ–µ VIN?</b>\n"
        "VIN (Vehicle Identification Number) ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 17-—Å–∏–º–≤–æ–ª—å–Ω—ã–π "
        "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìù <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç:</b>\n"
        "1. –ù–∞–π–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–æ–±—ã—á–Ω–æ –Ω–∞ –ª–æ–±–æ–≤–æ–º —Å—Ç–µ–∫–ª–µ, "
        "–¥–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—á–∫–µ –∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –±–æ—Ç—É (17 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ PDF –æ—Ç—á–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 17 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã I, O, Q\n"
        "‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-30 –º–∏–Ω—É—Ç\n\n"
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    
    await message.answer(
        help_text,
        reply_markup=MainKeyboards.get_help_keyboard(),
        parse_mode="HTML"
    )


@user_router.message(F.document)
async def handle_document_reply(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if message.chat.id != settings.manager_chat_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF <b>–≤ –æ—Ç–≤–µ—Ç</b> –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML"
        )
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
    replied_text = message.reply_to_message.text or ""
    ticket_id_match = re.search(r"–∑–∞—è–≤–∫–∞ ‚Ññ(\d+)", replied_text, re.IGNORECASE)
    
    if not ticket_id_match:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )
        return
    
    try:
        ticket_id = int(ticket_id_match.group(1))
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not message.document.file_name or not message.document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (50 –ú–ë)
    if message.document.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë",
            parse_mode="HTML"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    await _process_ticket_completion(bot, message, ticket_id, message.document)

@user_router.message(F.text)
async def handle_vin_message(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å VIN –Ω–æ–º–µ—Ä–∞–º–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    text = message.text.strip()
    
    logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN —Å–æ–æ–±—â–µ–Ω–∏—è", user_id=user_id, username=username, text=text, text_length=len(text))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è VIN
    is_valid, error_message = VINValidator.validate(text)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VIN</b>\n\n{error_message}\n\n"
            "üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b> 17 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ I, O, Q\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> 1HGBH41JXMN109186",
            parse_mode="HTML"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è VIN
    normalized_vin = VINValidator.normalize(text)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ db_adapter
    from src.db_adapter import db_adapter
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    ticket_data = None
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", user_id=user_id, vin=normalized_vin, username=username)
        ticket_data = await db_adapter.create_ticket(normalized_vin, user_id, username)
        logger.info("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", ticket_data=ticket_data)
        
        logger.info(
            "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            ticket_id=ticket_data["id"],
            user_id=user_id,
            vin=normalized_vin
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", user_id=user_id, ticket_id=ticket_data['id'])
        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket_data['id']}\n"
            f"üöó <b>VIN:</b> <code>{normalized_vin}</code>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –≤ —Ä–∞–±–æ—Ç–µ\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> 5-30 –º–∏–Ω—É—Ç\n"
            f"üìÑ <b>–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode="HTML"
        )
        logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", user_id=user_id)
        
    except Exception as e:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏", user_id=user_id, vin=normalized_vin, username=username, error=str(e), exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if ticket_data is not None:
        await _send_ticket_to_managers(bot, ticket_data, username)


async def _send_ticket_to_managers(bot: Bot, ticket_data: dict, username: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    try:
        ticket_text = (
            f"<b>üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ VIN-–æ—Ç—á–µ—Ç</b>\n\n"
            f"<b>ID –∑–∞—è–≤–∫–∏:</b> #{ticket_data['id']}\n"
            f"<b>VIN:</b> <code>{ticket_data['vin']}</code>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {ticket_data['status']}\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É</i>"
        )
        
        await bot.send_message(
            chat_id=settings.manager_chat_id,
            text=ticket_text,
            reply_markup=TicketKeyboards.get_take_keyboard(ticket_data['id']),
            parse_mode="HTML"
        )
        
        logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", ticket_id=ticket_data['id'])
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", error=str(e))


async def _process_ticket_completion(bot: Bot, message: Message, ticket_id: int, document) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    from src.db_adapter import db_adapter
    
    manager_id = message.from_user.id
    manager_username = message.from_user.username or f"manager_{manager_id}"
    
    try:
        logger.debug("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", ticket_id=ticket_id, manager_id=manager_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        ticket_data = await db_adapter.get_ticket(ticket_id)
        logger.debug("–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –±–∞–∑—ã", ticket_data=ticket_data)
        
        if not ticket_data:
            await message.answer(
                f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if ticket_data['status'] == "DONE":
            await message.answer(
                f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
                parse_mode="HTML"
            )
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏", ticket_id=ticket_id, status="DONE", assignee_id=manager_id)
        await db_adapter.update_ticket_status(ticket_id, "DONE", manager_id)
        
        logger.info(
            "–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            ticket_id=ticket_id,
            manager_id=manager_id,
            manager_username=manager_username
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", ticket_id=ticket_id, user_id=ticket_data['user_id'])
        await _send_report_to_user(bot, ticket_data, document)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É", ticket_id=ticket_id)
        await message.answer(
            f"‚úÖ <b>–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞\n"
            f"üë§ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫)
        if message.reply_to_message:
            try:
                await message.reply_to_message.edit_reply_markup(
                    reply_markup=TicketKeyboards.get_empty_keyboard()
                )
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏", error=str(e))
            
    except Exception as e:
        logger.error(
            "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
            ticket_id=ticket_id,
            manager_id=manager_id,
            error=str(e),
            exc_info=True
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if 'ticket_data' in locals() and ticket_data:
                await _send_report_to_user(bot, ticket_data, document)
                logger.info("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É", 
                           ticket_id=ticket_id)
        except Exception as report_error:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
                        error=str(report_error))
        
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def _send_report_to_user(bot: Bot, ticket_data: dict, document) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        await bot.send_message(
            chat_id=ticket_data['user_id'],
            text=f"‚úÖ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{ticket_data['id']}: –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                 f"üöó <b>VIN:</b> <code>{ticket_data['vin']}</code>\n"
                 f"üìÑ <b>–í–∞—à –æ—Ç—á–µ—Ç (PDF)</b> –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏–∂–µ.",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            chat_id=ticket_data['user_id'],
            document=document.file_id,
            caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É",
            parse_mode="HTML"
        )
        
        logger.info(
            "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            ticket_id=ticket_data['id'],
            user_id=ticket_data['user_id']
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            ticket_id=ticket_data['id'],
            user_id=ticket_data['user_id'],
            error=str(e)
        )


def _get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    
    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    """
    status_map = {
        "NEW": "–Ω–æ–≤–∞—è",
        "TAKEN": "–≤ —Ä–∞–±–æ—Ç–µ",
        "DONE": "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }
    return status_map.get(status, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
