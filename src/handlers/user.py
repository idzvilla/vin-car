"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

from __future__ import annotations

import re
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import get_db_session
from ..keyboards import MainKeyboards, TicketKeyboards
from ..models import Ticket
from ..settings import settings
from ..validators import UserInputValidator, VINValidator

# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", user_id=user_id, username=username)
    
    welcome_text = (
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIN Report Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ VIN –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ VIN –Ω–æ–º–µ—Ä (17 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
        "3. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º PDF –æ—Ç—á–µ—Ç\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä VIN:</b> 1HGBH41JXMN109186\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=MainKeyboards.get_start_keyboard(),
        parse_mode="HTML"
    )


@user_router.message(Command("help"))
async def cmd_help(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", user_id=user_id)
    
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîç <b>–ß—Ç–æ —Ç–∞–∫–æ–µ VIN?</b>\n"
        "VIN (Vehicle Identification Number) ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 17-—Å–∏–º–≤–æ–ª—å–Ω—ã–π "
        "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìù <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç:</b>\n"
        "1. –ù–∞–π–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–æ–±—ã—á–Ω–æ –Ω–∞ –ª–æ–±–æ–≤–æ–º —Å—Ç–µ–∫–ª–µ, "
        "–¥–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—á–∫–µ –∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ VIN –±–æ—Ç—É (17 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ PDF –æ—Ç—á–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 17 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã I, O, Q\n"
        "‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-30 –º–∏–Ω—É—Ç\n\n"
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    
    await message.answer(
        help_text,
        reply_markup=MainKeyboards.get_help_keyboard(),
        parse_mode="HTML"
    )


@user_router.message(F.text)
async def handle_vin_message(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å VIN –Ω–æ–º–µ—Ä–∞–º–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    text = message.text.strip()
    
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id=user_id, text_length=len(text))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è VIN
    is_valid, error_message = VINValidator.validate(text)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VIN</b>\n\n{error_message}\n\n"
            "üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b> 17 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ I, O, Q\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> 1HGBH41JXMN109186",
            parse_mode="HTML"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è VIN
    normalized_vin = VINValidator.normalize(text)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            existing_ticket = await session.execute(
                select(Ticket).where(
                    Ticket.vin == normalized_vin,
                    Ticket.user_id == user_id,
                    Ticket.status.in_(["NEW", "TAKEN"])
                )
            )
            existing_ticket = existing_ticket.scalar_one_or_none()
            
            if existing_ticket:
                await message.answer(
                    f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{existing_ticket.id} —Å VIN <code>{normalized_vin}</code> "
                    f"—É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {_get_status_text(existing_ticket.status)}",
                    parse_mode="HTML"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            ticket = Ticket(
                vin=normalized_vin,
                user_id=user_id,
                status="NEW"
            )
            session.add(ticket)
            await session.commit()
            await session.refresh(ticket)
            
            logger.info(
                "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
                ticket_id=ticket.id,
                user_id=user_id,
                vin=normalized_vin
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{ticket.id}\n"
                f"üöó <b>VIN:</b> <code>{normalized_vin}</code>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –≤ —Ä–∞–±–æ—Ç–µ\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> 5-30 –º–∏–Ω—É—Ç\n"
                f"üìÑ <b>–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await _send_ticket_to_managers(bot, ticket, username)
            
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏", user_id=user_id, error=str(e))
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


async def _send_ticket_to_managers(bot: Bot, ticket: Ticket, username: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        ticket: –ó–∞—è–≤–∫–∞
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        ticket_text = (
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{ticket.id}</b>\n\n"
            f"üë§ <b>–û—Ç:</b> @{username} (ID: {ticket.user_id})\n"
            f"üöó <b>VIN:</b> <code>{ticket.vin}</code>\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –Ω–æ–≤–∞—è"
        )
        
        await bot.send_message(
            chat_id=settings.manager_chat_id,
            text=ticket_text,
            reply_markup=TicketKeyboards.get_take_keyboard(ticket.id),
            parse_mode="HTML"
        )
        
        logger.info(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
            ticket_id=ticket.id,
            manager_chat_id=settings.manager_chat_id
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
            ticket_id=ticket.id,
            error=str(e)
        )


def _get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    
    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    """
    status_map = {
        "NEW": "–Ω–æ–≤–∞—è",
        "TAKEN": "–≤ —Ä–∞–±–æ—Ç–µ",
        "DONE": "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }
    return status_map.get(status, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
