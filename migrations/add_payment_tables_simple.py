#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫."""

import sqlite3
from pathlib import Path
from loguru import logger


def create_payment_tables():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ SQLite."""
    db_path = Path(__file__).parent.parent / "vin_reports.db"
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id BIGINT NOT NULL,
                amount INTEGER NOT NULL,
                currency VARCHAR(3) NOT NULL DEFAULT 'USD',
                payment_type VARCHAR(20) NOT NULL,
                reports_count INTEGER NOT NULL,
                status VARCHAR(20) NOT NULL DEFAULT 'pending',
                payment_provider VARCHAR(50) NOT NULL,
                external_id VARCHAR(100),
                created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                completed_at DATETIME
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å–æ–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id BIGINT NOT NULL,
                reports_remaining INTEGER NOT NULL DEFAULT 0,
                total_reports INTEGER NOT NULL DEFAULT 0,
                created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON user_subscriptions(user_id)")
        
        conn.commit()
        conn.close()
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–ª–∞—Ç–µ–∂–µ–π")
    
    try:
        create_payment_tables()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
