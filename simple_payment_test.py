#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã –±–µ–∑ async/await."""

import sqlite3
from pathlib import Path
from loguru import logger


def test_payment_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã."""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã")
    
    db_path = Path(__file__).parent / "vin_reports.db"
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user_id = 123456789
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute("SELECT * FROM user_subscriptions WHERE user_id = ?", (test_user_id,))
        subscription = cursor.fetchone()
        logger.info(f"1. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {subscription}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ 1 –æ—Ç—á–µ—Ç
        cursor.execute("""
            INSERT INTO payments (user_id, amount, currency, payment_type, reports_count, status, payment_provider)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (test_user_id, 200, "USD", "single", 1, "pending", "manual"))
        
        payment_id = cursor.lastrowid
        logger.info(f"2. –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: ID={payment_id}")
        
        # 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
        cursor.execute("""
            UPDATE payments 
            SET status = 'completed', completed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (payment_id,))
        
        # 4. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute("""
            INSERT OR REPLACE INTO user_subscriptions (user_id, reports_remaining, total_reports)
            VALUES (?, COALESCE((SELECT reports_remaining FROM user_subscriptions WHERE user_id = ?), 0) + ?, 
                   COALESCE((SELECT total_reports FROM user_subscriptions WHERE user_id = ?), 0) + ?)
        """, (test_user_id, test_user_id, 1, test_user_id, 1))
        
        conn.commit()
        logger.info("3. –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute("SELECT * FROM user_subscriptions WHERE user_id = ?", (test_user_id,))
        subscription = cursor.fetchone()
        logger.info(f"4. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {subscription}")
        
        # 6. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç
        cursor.execute("""
            UPDATE user_subscriptions 
            SET reports_remaining = reports_remaining - 1
            WHERE user_id = ? AND reports_remaining > 0
        """, (test_user_id,))
        
        conn.commit()
        logger.info("5. –û—Ç—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cursor.execute("SELECT * FROM user_subscriptions WHERE user_id = ?", (test_user_id,))
        subscription = cursor.fetchone()
        logger.info(f"6. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {subscription}")
        
        # 8. –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        cursor.execute("""
            INSERT INTO payments (user_id, amount, currency, payment_type, reports_count, status, payment_provider)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (test_user_id, 10000, "USD", "bulk", 100, "pending", "manual"))
        
        bulk_payment_id = cursor.lastrowid
        logger.info(f"7. –°–æ–∑–¥–∞–Ω –æ–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: ID={bulk_payment_id}")
        
        # 9. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        cursor.execute("""
            UPDATE payments 
            SET status = 'completed', completed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (bulk_payment_id,))
        
        # 10. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute("""
            UPDATE user_subscriptions 
            SET reports_remaining = reports_remaining + 100, total_reports = total_reports + 100
            WHERE user_id = ?
        """, (test_user_id,))
        
        conn.commit()
        logger.info("8. –û–ø—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute("SELECT * FROM user_subscriptions WHERE user_id = ?", (test_user_id,))
        final_subscription = cursor.fetchone()
        logger.info(f"9. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {final_subscription}")
        
        # 12. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        cursor.execute("SELECT * FROM payments WHERE user_id = ?", (test_user_id,))
        payments = cursor.fetchall()
        logger.info(f"10. –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {payments}")
        
        conn.close()
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        test_payment_system()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
